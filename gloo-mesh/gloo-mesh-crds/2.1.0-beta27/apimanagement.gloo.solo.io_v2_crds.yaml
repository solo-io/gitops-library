# Code generated by skv2. DO NOT EDIT.

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    crd.solo.io/specHash: 505f6a70c10678ba
    crd.solo.io/version: 2.1.0
  labels:
    app: gloo-mesh-apis
    app.kubernetes.io/name: gloo-mesh-apis
  name: graphqlschemas.apimanagement.gloo.solo.io
spec:
  group: apimanagement.gloo.solo.io
  names:
    categories:
    - solo-io
    kind: GraphQLSchema
    listKind: GraphQLSchemaList
    plural: graphqlschemas
    singular: graphqlschema
  scope: Namespaced
  versions:
  - name: v2
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: |-
              The GraphQLSchema resource is responsible for providing the schema definition
              in GraphQL SDL format. It also has logging options for logging sensitive request-related information.
              And schema extension configuration such as custom type definitions.
            properties:
              schemaDefinition:
                description: |-
                  Required: GraphQL Schema Definition. Root-level Query and Mutation types are supported, while the Subscription type is not
                  yet supported.
                type: string
            type: object
          status:
            properties:
              global:
                properties:
                  message:
                    description: |-
                      Additional information about the current state of the resource across all
                      workspace clusters.
                    type: string
                  state:
                    description: |-
                      Whether the resource has been accepted as valid and processed in workspace
                      clusters that it exists in.
                    enum:
                    - PENDING
                    - ACCEPTED
                    - INVALID
                    - WARNING
                    - FAILED
                    - UNLICENSED
                    type: string
                type: object
              ownerWorkspace:
                description: Name of Workspace that owns the route table
                properties:
                  workspace:
                    type: string
                type: object
              workspaces:
                additionalProperties:
                  properties:
                    clusters:
                      additionalProperties:
                        properties:
                          generic:
                            properties:
                              message:
                                description: Additional information about the current
                                  state of the resource.
                                type: string
                              observedGeneration:
                                description: |-
                                  The most recent generation observed in the the object's metadata.
                                  If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh
                                  has not processed the most recent version of this object.
                                format: int64
                                type: integer
                              state:
                                description: |-
                                  Whether the resource has been accepted as valid and processed in the Gloo
                                  Mesh config translation.
                                enum:
                                - PENDING
                                - ACCEPTED
                                - INVALID
                                - WARNING
                                - FAILED
                                - UNLICENSED
                                type: string
                              updatedAt:
                                description: The last time the status was updated.
                                format: date-time
                                type: string
                            type: object
                        type: object
                      description: |-
                        The status of the resource in each cluster within the
                        workspace.
                      type: object
                  type: object
                description: The status of the resource in each workspace that it
                  exists in.
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    crd.solo.io/specHash: 3820e9efd2fc9190
    crd.solo.io/version: 2.1.0
  labels:
    app: gloo-mesh-apis
    app.kubernetes.io/name: gloo-mesh-apis
  name: graphqlstitchedschemas.apimanagement.gloo.solo.io
spec:
  group: apimanagement.gloo.solo.io
  names:
    categories:
    - solo-io
    kind: GraphQLStitchedSchema
    listKind: GraphQLStitchedSchemaList
    plural: graphqlstitchedschemas
    singular: graphqlstitchedschema
  scope: Namespaced
  versions:
  - name: v2
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              subschemas:
                description: List of GraphQL Subschemas that compose this GraphQL
                  stitched schema.
                items:
                  properties:
                    executableSubschema:
                      oneOf:
                      - not:
                          anyOf:
                          - required:
                            - server
                          - required:
                            - local
                      - required:
                        - server
                      - required:
                        - local
                      properties:
                        local:
                          description: |-
                            List of references to GraphQLResolverMap resources. GraphQLResolverMaps
                            contain a mapping from GraphQL fields to resolver configuration, so that those fields can be resolved
                            locally by this GraphQL-envoy instance.
                            Order of the references listed below does matter as resolver maps listed first
                            will be given priority over later ones when tie-breaking field resolver configurations.
                          properties:
                            options:
                              properties:
                                enableIntrospection:
                                  description: |-
                                    Do we enable introspection for the schema? general recommendation is to
                                    disable this for production and hence it defaults to false.
                                  type: boolean
                                maxDepth:
                                  description: |-
                                    Max GraphQL operation (query/mutation/subscription) depth. This sets a limitation on the max nesting on a query that runs against this schema.
                                    any GraphQL operation that runs past the `max_depth` will add an error message to the response and will return as `null`.
                                    As as simple example, if the schema is
                                    ```gql
                                    type Query {
                                      employee: Employee
                                    }

                                    type Employee {
                                      manager: Employee
                                      name: String
                                    }
                                    ```
                                    and we set a `max_depth` of `3` and we run a query
                                    ```gql
                                    query {             # query depth : 0
                                      employee {        # query depth : 1
                                        manager {       # query depth : 2
                                          name          # query depth : 3
                                          manager {     # query depth : 3
                                            name        # query depth : 4
                                          }
                                        }
                                      }
                                    }
                                    ```
                                    the graphql server will respond with a response:
                                    ```json
                                    { "data" : {
                                        "employee" : {
                                          "manager" : {
                                            "name" : "Manager 1",
                                            "manager"  : {
                                              "name" : null
                                      }}}},
                                      "errors": [
                                         {"message": "field 'name' exceeds the max operation depth of 3 for this schema"}
                                       ]
                                    }
                                    If not configured, or the value is 0, the query depth will be unbounded.
                                  maximum: 4294967295
                                  minimum: 0
                                  nullable: true
                                  type: integer
                              type: object
                            resolverMapRefs:
                              description: |-
                                List of references to GraphQLResolverMap resources. GraphQLResolverMaps
                                contain a mapping from GraphQL fields to resolver configuration, so that those fields can be resolved
                                locally by this GraphQL-envoy instance.
                                Order of the references listed below does matter as resolver maps listed first
                                will be given priority over later ones when tie-breaking field resolver configurations.
                              items:
                                properties:
                                  clusterName:
                                    description: name of the cluster in which the
                                      resource exists
                                    type: string
                                  name:
                                    description: name of the resource being referenced
                                    type: string
                                  namespace:
                                    description: namespace of the resource being referenced
                                    type: string
                                type: object
                              type: array
                          type: object
                        schemaRef:
                          description: |-
                            Required: Reference to the GraphQLSchema object which contains the [GraphQL SDL](https://graphql.org/learn/schema/)
                            defining this GraphQL schema.
                          properties:
                            clusterName:
                              description: name of the cluster in which the resource
                                exists
                              type: string
                            name:
                              description: name of the resource being referenced
                              type: string
                            namespace:
                              description: namespace of the resource being referenced
                              type: string
                          type: object
                        server:
                          description: |-
                            Configuration to delegate resolving this GraphQL request to an external GraphQL server, which can be
                            another GlooGraphQL instance or another instance of a GraphQL server. The external GraphQL server must
                            be compliant with the [June 2018 GraphQL specification](https://spec.graphql.org/June2018/).
                          properties:
                            graphqlServers:
                              description: |-
                                List of destinations that can server GraphQL requests. The external GraphQL server must
                                be compliant with the [June 2018 GraphQL specification](https://spec.graphql.org/June2018).
                                Though this is a list, only the first referenced destination will be used until fail-over and load balancing
                                is supported between multiple GraphQL destinations.
                              items:
                                properties:
                                  kind:
                                    description: the kind of destination being selected.
                                      defaults to Kubernetes Service.
                                    enum:
                                    - SERVICE
                                    - VIRTUAL_DESTINATION
                                    - EXTERNAL_SERVICE
                                    type: string
                                  port:
                                    description: the port on the destination object
                                      being targeted. required if the object provides
                                      more than one port.
                                    oneOf:
                                    - not:
                                        anyOf:
                                        - required:
                                          - number
                                        - required:
                                          - name
                                    - required:
                                      - number
                                    - required:
                                      - name
                                    properties:
                                      name:
                                        description: the name of the port on the destination
                                          objects being targeted.
                                        type: string
                                      number:
                                        description: the number of the port on the
                                          destination objects being targeted.
                                        maximum: 4294967295
                                        minimum: 0
                                        type: integer
                                    type: object
                                  ref:
                                    description: reference to the destination object
                                      by its metadata
                                    properties:
                                      cluster:
                                        description: the cluster of the object. if
                                          the field is omitted, Gloo Mesh will use
                                          the same cluster as the parent object containing
                                          this reference.
                                        type: string
                                      name:
                                        description: the name of the object
                                        type: string
                                      namespace:
                                        description: the namespace of the object.
                                          if the field is omitted, Gloo Mesh will
                                          use the same namespace as the parent object
                                          containing this reference.
                                        type: string
                                    type: object
                                  subset:
                                    additionalProperties:
                                      type: string
                                    description: select a subset of the destination's
                                      endpoints for routing based on their labels.
                                    type: object
                                  weight:
                                    description: |-
                                      Specify the proportion of traffic to be forwarded to this destination.
                                      Weights across all of the `destinations` must sum to 100.
                                      Weight is only relevant when used in the context of a route with multiple destinations.
                                    maximum: 4294967295
                                    minimum: 0
                                    type: integer
                                type: object
                              type: array
                            headers:
                              additionalProperties:
                                oneOf:
                                - not:
                                    anyOf:
                                    - required:
                                      - variable
                                    - required:
                                      - jq
                                    - required:
                                      - value
                                - required:
                                  - variable
                                - required:
                                  - jq
                                - required:
                                  - value
                                properties:
                                  jq:
                                    description: |-
                                      The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
                                      variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
                                      For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
                                      Jq filters must only result in one value, or an error will be sent back to the client.
                                      For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
                                      in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
                                      Refer to the [jq manual](https://stedolan.github.io/jq/manual/) for jq syntax and tips.
                                      --- Using variables ---
                                      Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
                                      jq filter.
                                      For example, if the following variables have been declared:
                                      ```yaml
                                      variables:
                                        userIdHeader:
                                          request_header: x-user-id
                                        resolverResultVar:
                                          resolver_result: {}
                                      ```
                                      then the input object to the `jq` filter would be
                                      ```json
                                      {
                                       "userIdHeader": <x-user-id header value from GraphQL request>,
                                       "resolverResultVar": { .. the resolver result .. }
                                      }
                                      ```
                                      --- Using a jq filter ---
                                      Given the following input object to the `jq` transformation, we can use a filter to transform the values.
                                      ```json
                                      {
                                       "userIdHeader": "john_doe123",
                                       "resolverResultVar": { "data": {"name": "John Doe"} }
                                      }
                                      ```
                                      If the `jq` filter is defined as
                                      ```
                                      "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
                                      ```
                                      the result of the jq transformation would be
                                      ```
                                      "User john_doe123, Name: John Doe"
                                      ```
                                    type: string
                                  value:
                                    description: Static JSON value.
                                    type: object
                                  variable:
                                    description: |-
                                      The name of a variable declared in the `variables` field. The value of the variable
                                      is returned with no transformation.
                                    type: string
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              description: |-
                                map of header name to a transformation on extracted variables which are declared
                                in the `variables` field.
                                The transformation must result in a string value, or an error will be sent back to the client.
                              type: object
                            queryParams:
                              additionalProperties:
                                oneOf:
                                - not:
                                    anyOf:
                                    - required:
                                      - variable
                                    - required:
                                      - jq
                                    - required:
                                      - value
                                - required:
                                  - variable
                                - required:
                                  - jq
                                - required:
                                  - value
                                properties:
                                  jq:
                                    description: |-
                                      The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
                                      variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
                                      For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
                                      Jq filters must only result in one value, or an error will be sent back to the client.
                                      For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
                                      in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
                                      Refer to the [jq manual](https://stedolan.github.io/jq/manual/) for jq syntax and tips.
                                      --- Using variables ---
                                      Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
                                      jq filter.
                                      For example, if the following variables have been declared:
                                      ```yaml
                                      variables:
                                        userIdHeader:
                                          request_header: x-user-id
                                        resolverResultVar:
                                          resolver_result: {}
                                      ```
                                      then the input object to the `jq` filter would be
                                      ```json
                                      {
                                       "userIdHeader": <x-user-id header value from GraphQL request>,
                                       "resolverResultVar": { .. the resolver result .. }
                                      }
                                      ```
                                      --- Using a jq filter ---
                                      Given the following input object to the `jq` transformation, we can use a filter to transform the values.
                                      ```json
                                      {
                                       "userIdHeader": "john_doe123",
                                       "resolverResultVar": { "data": {"name": "John Doe"} }
                                      }
                                      ```
                                      If the `jq` filter is defined as
                                      ```
                                      "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
                                      ```
                                      the result of the jq transformation would be
                                      ```
                                      "User john_doe123, Name: John Doe"
                                      ```
                                    type: string
                                  value:
                                    description: Static JSON value.
                                    type: object
                                  variable:
                                    description: |-
                                      The name of a variable declared in the `variables` field. The value of the variable
                                      is returned with no transformation.
                                    type: string
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              description: |-
                                map of query parameter name to a transformation on extracted variables which are declared
                                in the `variables` field.
                                The transformation must result in a string value, or an error will be sent back to the client.
                              type: object
                            spanName:
                              description: |-
                                The span name for the remote GraphQL request, used for tracing.
                                If left empty or not set, the request span name will be set to the upstream cluster name.
                              type: string
                            variables:
                              additionalProperties:
                                oneOf:
                                - not:
                                    anyOf:
                                    - required:
                                      - dynamicMetadata
                                    - required:
                                      - requestHeader
                                    - required:
                                      - jsonValue
                                - required:
                                  - dynamicMetadata
                                - required:
                                  - requestHeader
                                - required:
                                  - jsonValue
                                properties:
                                  dynamicMetadata:
                                    description: Extract the value from envoy dynamic
                                      metadata. The extracted value is an object.
                                    properties:
                                      key:
                                        description: |-
                                          The key under the envoy dynamic metadata namespace that the data lives under.
                                          If the key doesn't exist in the namespace, the extraction yields null
                                        type: string
                                      metadataNamespace:
                                        description: |-
                                          The envoy dynamic metadata namespace that the data lives in. If the namespace doesn't exist in the
                                          metadata, the extraction yields null
                                        type: string
                                    type: object
                                  jsonValue:
                                    description: Assigns the variable to a JSON value
                                      specified here.
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                  requestHeader:
                                    description: |-
                                      Extract the value from the GraphQL HTTP request header. The extracted value is a string.
                                      If the header doesn't exist, an empty string will be used.
                                    type: string
                                type: object
                              description: |-
                                Declare variables that are used in variable transformations in the fields below for the GraphQL request to a remote server.
                                The keys to this map are the name of the variables. See the variable transformations specifically
                                for how to reference these variables.
                              type: object
                          type: object
                      type: object
                    typeMerge:
                      additionalProperties:
                        properties:
                          args:
                            additionalProperties:
                              type: string
                            type: object
                          queryName:
                            description: specifies the root field from this subschema
                              used to request the local type
                            type: string
                          selectionSet:
                            description: |-
                              This specifies one or more key fields required from other services to perform this query.
                              Query planning will automatically resolve these fields from other subschemas in dependency order.
                              This is a graphql selection set specified as a string
                              e.g. '{ username }'
                            type: string
                        type: object
                      description: |-
                        Type merge configuration for this subschema. Let's say this subschema is a Users service schema
                             and provides the User type (with a query to fetch a user given the username)
                             ```gql
                             type Query {
                               GetUser(username: String): User
                             }
                             type User {
                               username: String
                               firstName: String
                               lastName: String
                             }
                             ```
                             and another subschema, e.g. Reviews schema, may have a partial User type:
                             ```gql
                             type Review {
                               author: User
                             }
                             type User {
                               username: String
                             }
                             ```
                             We want to provide the relevant information from this Users service schema,
                             so that another API that can give us a partial User type (with the username) will then
                             be able to have access to the full user type. With the correct type merging config under the Users subschema, e.g.:
                             ```yaml
                             type_merge:
                               User:
                                 selection_set: '{ username }'
                                 query_name: 'GetUser'
                                 args:
                                   username: username
                             ```
                             the stitched schema will now be able to provide the full user type to all types that require it. In this case,
                             we can now get the first name of an author from the Review.author field even though the Reviews schema doesn't
                             provide the full User type.
                      type: object
                  type: object
                type: array
            type: object
          status:
            properties:
              global:
                properties:
                  message:
                    description: |-
                      Additional information about the current state of the resource across all
                      workspace clusters.
                    type: string
                  state:
                    description: |-
                      Whether the resource has been accepted as valid and processed in workspace
                      clusters that it exists in.
                    enum:
                    - PENDING
                    - ACCEPTED
                    - INVALID
                    - WARNING
                    - FAILED
                    - UNLICENSED
                    type: string
                type: object
              ownerWorkspace:
                description: Name of Workspace that owns the route table
                properties:
                  workspace:
                    type: string
                type: object
              workspaces:
                additionalProperties:
                  properties:
                    clusters:
                      additionalProperties:
                        properties:
                          generic:
                            properties:
                              message:
                                description: Additional information about the current
                                  state of the resource.
                                type: string
                              observedGeneration:
                                description: |-
                                  The most recent generation observed in the the object's metadata.
                                  If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh
                                  has not processed the most recent version of this object.
                                format: int64
                                type: integer
                              state:
                                description: |-
                                  Whether the resource has been accepted as valid and processed in the Gloo
                                  Mesh config translation.
                                enum:
                                - PENDING
                                - ACCEPTED
                                - INVALID
                                - WARNING
                                - FAILED
                                - UNLICENSED
                                type: string
                              updatedAt:
                                description: The last time the status was updated.
                                format: date-time
                                type: string
                            type: object
                        type: object
                      description: |-
                        The status of the resource in each cluster within the
                        workspace.
                      type: object
                  type: object
                description: The status of the resource in each workspace that it
                  exists in.
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    crd.solo.io/specHash: a081afec3745fa03
    crd.solo.io/version: 2.1.0
  labels:
    app: gloo-mesh-apis
    app.kubernetes.io/name: gloo-mesh-apis
  name: graphqlresolvermaps.apimanagement.gloo.solo.io
spec:
  group: apimanagement.gloo.solo.io
  names:
    categories:
    - solo-io
    kind: GraphQLResolverMap
    listKind: GraphQLResolverMapList
    plural: graphqlresolvermaps
    singular: graphqlresolvermap
  scope: Namespaced
  versions:
  - name: v2
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: |-
              The GraphQLResolverMap Resource contains a mapping from types to fields to
              resolutions. For example, for a schema with type `Query` and field `GetName`
              ```graphql
               type Query {
                 GetName: String
               }
              ```
               you can configure a resolver for the `GetName` field as follows:
               ```yaml
               types:
                 Query:
                   fields:
                     GetName:
                       <insert resolver config>
               ```
            properties:
              types:
                additionalProperties:
                  properties:
                    fields:
                      additionalProperties:
                        properties:
                          resolvers:
                            description: |-
                              List of resolvers.
                              Currently, only one the first resolver configuration will be respected and a warning will be thrown
                              if more than one resolver is in the list.
                            items:
                              oneOf:
                              - not:
                                  anyOf:
                                  - required:
                                    - restResolver
                              - required:
                                - restResolver
                              properties:
                                resolverResultTransform:
                                  description: |-
                                    Use a transformation on extracted variables to transform the upstream REST response.
                                    By default, the transformation is empty and the destination response is left as is before
                                    being passed into the GraphQL execution engine.
                                  oneOf:
                                  - not:
                                      anyOf:
                                      - required:
                                        - variable
                                      - required:
                                        - jq
                                      - required:
                                        - value
                                  - required:
                                    - variable
                                  - required:
                                    - jq
                                  - required:
                                    - value
                                  properties:
                                    jq:
                                      description: |-
                                        The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
                                        variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
                                        For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
                                        Jq filters must only result in one value, or an error will be sent back to the client.
                                        For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
                                        in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
                                        Refer to the [jq manual](https://stedolan.github.io/jq/manual/) for jq syntax and tips.
                                        --- Using variables ---
                                        Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
                                        jq filter.
                                        For example, if the following variables have been declared:
                                        ```yaml
                                        variables:
                                          userIdHeader:
                                            request_header: x-user-id
                                          resolverResultVar:
                                            resolver_result: {}
                                        ```
                                        then the input object to the `jq` filter would be
                                        ```json
                                        {
                                         "userIdHeader": <x-user-id header value from GraphQL request>,
                                         "resolverResultVar": { .. the resolver result .. }
                                        }
                                        ```
                                        --- Using a jq filter ---
                                        Given the following input object to the `jq` transformation, we can use a filter to transform the values.
                                        ```json
                                        {
                                         "userIdHeader": "john_doe123",
                                         "resolverResultVar": { "data": {"name": "John Doe"} }
                                        }
                                        ```
                                        If the `jq` filter is defined as
                                        ```
                                        "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
                                        ```
                                        the result of the jq transformation would be
                                        ```
                                        "User john_doe123, Name: John Doe"
                                        ```
                                      type: string
                                    value:
                                      description: Static JSON value.
                                      type: object
                                    variable:
                                      description: |-
                                        The name of a variable declared in the `variables` field. The value of the variable
                                        is returned with no transformation.
                                      type: string
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                                restResolver:
                                  description: Resolves values by making a HTTP/2
                                    request to a HTTP/REST destination.
                                  properties:
                                    destinations:
                                      description: |-
                                        Required: list of destinations which point to destinations containing
                                        a RESTful service. Must provide at least one destination.

                                        (Note: only the first destination will be used)
                                      items:
                                        properties:
                                          kind:
                                            description: the kind of destination being
                                              selected. defaults to Kubernetes Service.
                                            enum:
                                            - SERVICE
                                            - VIRTUAL_DESTINATION
                                            - EXTERNAL_SERVICE
                                            type: string
                                          port:
                                            description: the port on the destination
                                              object being targeted. required if the
                                              object provides more than one port.
                                            oneOf:
                                            - not:
                                                anyOf:
                                                - required:
                                                  - number
                                                - required:
                                                  - name
                                            - required:
                                              - number
                                            - required:
                                              - name
                                            properties:
                                              name:
                                                description: the name of the port
                                                  on the destination objects being
                                                  targeted.
                                                type: string
                                              number:
                                                description: the number of the port
                                                  on the destination objects being
                                                  targeted.
                                                maximum: 4294967295
                                                minimum: 0
                                                type: integer
                                            type: object
                                          ref:
                                            description: reference to the destination
                                              object by its metadata
                                            properties:
                                              cluster:
                                                description: the cluster of the object.
                                                  if the field is omitted, Gloo Mesh
                                                  will use the same cluster as the
                                                  parent object containing this reference.
                                                type: string
                                              name:
                                                description: the name of the object
                                                type: string
                                              namespace:
                                                description: the namespace of the
                                                  object. if the field is omitted,
                                                  Gloo Mesh will use the same namespace
                                                  as the parent object containing
                                                  this reference.
                                                type: string
                                            type: object
                                          subset:
                                            additionalProperties:
                                              type: string
                                            description: select a subset of the destination's
                                              endpoints for routing based on their
                                              labels.
                                            type: object
                                          weight:
                                            description: |-
                                              Specify the proportion of traffic to be forwarded to this destination.
                                              Weights across all of the `destinations` must sum to 100.
                                              Weight is only relevant when used in the context of a route with multiple destinations.
                                            maximum: 4294967295
                                            minimum: 0
                                            type: integer
                                        type: object
                                      type: array
                                    request:
                                      description: |-
                                        Configuration to template a HTTP request to fetch JSON from a destination REST service.
                                        This includes configuration such as setting headers dynamically on the HTTP request, configuring query_params,
                                        and setting the body for the request to the destination.
                                      properties:
                                        body:
                                          description: |-
                                            Sets the outgoing body to the upstream REST destination.
                                            By default, the body is empty.
                                          oneOf:
                                          - not:
                                              anyOf:
                                              - required:
                                                - variable
                                              - required:
                                                - jq
                                              - required:
                                                - value
                                          - required:
                                            - variable
                                          - required:
                                            - jq
                                          - required:
                                            - value
                                          properties:
                                            jq:
                                              description: |-
                                                The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
                                                variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
                                                For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
                                                Jq filters must only result in one value, or an error will be sent back to the client.
                                                For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
                                                in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
                                                Refer to the [jq manual](https://stedolan.github.io/jq/manual/) for jq syntax and tips.
                                                --- Using variables ---
                                                Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
                                                jq filter.
                                                For example, if the following variables have been declared:
                                                ```yaml
                                                variables:
                                                  userIdHeader:
                                                    request_header: x-user-id
                                                  resolverResultVar:
                                                    resolver_result: {}
                                                ```
                                                then the input object to the `jq` filter would be
                                                ```json
                                                {
                                                 "userIdHeader": <x-user-id header value from GraphQL request>,
                                                 "resolverResultVar": { .. the resolver result .. }
                                                }
                                                ```
                                                --- Using a jq filter ---
                                                Given the following input object to the `jq` transformation, we can use a filter to transform the values.
                                                ```json
                                                {
                                                 "userIdHeader": "john_doe123",
                                                 "resolverResultVar": { "data": {"name": "John Doe"} }
                                                }
                                                ```
                                                If the `jq` filter is defined as
                                                ```
                                                "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
                                                ```
                                                the result of the jq transformation would be
                                                ```
                                                "User john_doe123, Name: John Doe"
                                                ```
                                              type: string
                                            value:
                                              description: Static JSON value.
                                              type: object
                                            variable:
                                              description: |-
                                                The name of a variable declared in the `variables` field. The value of the variable
                                                is returned with no transformation.
                                              type: string
                                          type: object
                                          x-kubernetes-preserve-unknown-fields: true
                                        headers:
                                          additionalProperties:
                                            oneOf:
                                            - not:
                                                anyOf:
                                                - required:
                                                  - variable
                                                - required:
                                                  - jq
                                                - required:
                                                  - value
                                            - required:
                                              - variable
                                            - required:
                                              - jq
                                            - required:
                                              - value
                                            properties:
                                              jq:
                                                description: |-
                                                  The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
                                                  variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
                                                  For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
                                                  Jq filters must only result in one value, or an error will be sent back to the client.
                                                  For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
                                                  in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
                                                  Refer to the [jq manual](https://stedolan.github.io/jq/manual/) for jq syntax and tips.
                                                  --- Using variables ---
                                                  Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
                                                  jq filter.
                                                  For example, if the following variables have been declared:
                                                  ```yaml
                                                  variables:
                                                    userIdHeader:
                                                      request_header: x-user-id
                                                    resolverResultVar:
                                                      resolver_result: {}
                                                  ```
                                                  then the input object to the `jq` filter would be
                                                  ```json
                                                  {
                                                   "userIdHeader": <x-user-id header value from GraphQL request>,
                                                   "resolverResultVar": { .. the resolver result .. }
                                                  }
                                                  ```
                                                  --- Using a jq filter ---
                                                  Given the following input object to the `jq` transformation, we can use a filter to transform the values.
                                                  ```json
                                                  {
                                                   "userIdHeader": "john_doe123",
                                                   "resolverResultVar": { "data": {"name": "John Doe"} }
                                                  }
                                                  ```
                                                  If the `jq` filter is defined as
                                                  ```
                                                  "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
                                                  ```
                                                  the result of the jq transformation would be
                                                  ```
                                                  "User john_doe123, Name: John Doe"
                                                  ```
                                                type: string
                                              value:
                                                description: Static JSON value.
                                                type: object
                                              variable:
                                                description: |-
                                                  The name of a variable declared in the `variables` field. The value of the variable
                                                  is returned with no transformation.
                                                type: string
                                            type: object
                                            x-kubernetes-preserve-unknown-fields: true
                                          description: |-
                                            Sets the headers on the request to the REST destination.
                                            This includes setting HTTP :path header.
                                            This is a map of HTTP Header name to a transformation which determines the Header value.
                                            The transformation must result in a string value, or an error will be sent back to the client.
                                            By default, the :method header is set to GET. If `body` is set, then the :method is POST. This can be overridden
                                            by setting the :method header manually below.
                                          type: object
                                        queryParams:
                                          additionalProperties:
                                            oneOf:
                                            - not:
                                                anyOf:
                                                - required:
                                                  - variable
                                                - required:
                                                  - jq
                                                - required:
                                                  - value
                                            - required:
                                              - variable
                                            - required:
                                              - jq
                                            - required:
                                              - value
                                            properties:
                                              jq:
                                                description: |-
                                                  The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
                                                  variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
                                                  For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
                                                  Jq filters must only result in one value, or an error will be sent back to the client.
                                                  For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
                                                  in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
                                                  Refer to the [jq manual](https://stedolan.github.io/jq/manual/) for jq syntax and tips.
                                                  --- Using variables ---
                                                  Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
                                                  jq filter.
                                                  For example, if the following variables have been declared:
                                                  ```yaml
                                                  variables:
                                                    userIdHeader:
                                                      request_header: x-user-id
                                                    resolverResultVar:
                                                      resolver_result: {}
                                                  ```
                                                  then the input object to the `jq` filter would be
                                                  ```json
                                                  {
                                                   "userIdHeader": <x-user-id header value from GraphQL request>,
                                                   "resolverResultVar": { .. the resolver result .. }
                                                  }
                                                  ```
                                                  --- Using a jq filter ---
                                                  Given the following input object to the `jq` transformation, we can use a filter to transform the values.
                                                  ```json
                                                  {
                                                   "userIdHeader": "john_doe123",
                                                   "resolverResultVar": { "data": {"name": "John Doe"} }
                                                  }
                                                  ```
                                                  If the `jq` filter is defined as
                                                  ```
                                                  "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
                                                  ```
                                                  the result of the jq transformation would be
                                                  ```
                                                  "User john_doe123, Name: John Doe"
                                                  ```
                                                type: string
                                              value:
                                                description: Static JSON value.
                                                type: object
                                              variable:
                                                description: |-
                                                  The name of a variable declared in the `variables` field. The value of the variable
                                                  is returned with no transformation.
                                                type: string
                                            type: object
                                            x-kubernetes-preserve-unknown-fields: true
                                          description: |-
                                            Sets the query parameters on the request to the REST destination.
                                            The transformation must result in a string value, or an error will be sent back to the client.
                                          type: object
                                      type: object
                                    spanName:
                                      description: |-
                                        The span name for the upstream REST request, used for tracing.
                                        If left empty or not set, the request span name will be set to the upstream cluster name.
                                      nullable: true
                                      type: string
                                    timeout:
                                      description: Set the timeout of the HTTP request
                                        to the REST service (default 5s)
                                      type: string
                                    variables:
                                      additionalProperties:
                                        properties:
                                          responseHeader:
                                            description: |-
                                              Only available on response transformations
                                              Extract the value from the GraphQL HTTP response header. The extracted value is a string.
                                              If this Extraction is used in a place where response headers are not available, an error
                                              will be thrown during configuration time.
                                            type: string
                                        type: object
                                      description: |-
                                        Variables that can be used in this field's response transform.
                                        The key is the name of the variable, which is directly used in the transformation.
                                        The value defines where the variable value is extracted from on the GraphQL REST response.
                                      type: object
                                  type: object
                              type: object
                            type: array
                          statPrefix:
                            description: |-
                              The stats prefix which will be used for this resolver.
                              If empty, will generate a stats prefix ${RESOLVER_NAME}
                            nullable: true
                            type: string
                          variables:
                            additionalProperties:
                              oneOf:
                              - not:
                                  anyOf:
                                  - required:
                                    - requestHeader
                                  - required:
                                    - dynamicMetadata
                                  - required:
                                    - graphqlParent
                                  - required:
                                    - graphqlArg
                                  - required:
                                    - resolverResult
                                  - required:
                                    - jsonValue
                              - required:
                                - requestHeader
                              - required:
                                - dynamicMetadata
                              - required:
                                - graphqlParent
                              - required:
                                - graphqlArg
                              - required:
                                - resolverResult
                              - required:
                                - jsonValue
                              properties:
                                dynamicMetadata:
                                  description: Extract the value from envoy dynamic
                                    metadata. The extracted value is an object.
                                  properties:
                                    key:
                                      description: |-
                                        The key under the envoy dynamic metadata namespace that the data lives under.
                                        If the key doesn't exist in the namespace, the extraction yields null
                                      type: string
                                    metadataNamespace:
                                      description: |-
                                        The envoy dynamic metadata namespace that the data lives in. If the namespace doesn't exist in the
                                        metadata, the extraction yields null
                                      type: string
                                  type: object
                                graphqlArg:
                                  description: |-
                                    Assigns the variable to the GraphQL Argument with this name.
                                    If this name doesn't exist, the variable is `null`
                                  type: string
                                graphqlParent:
                                  description: Assigns the variable to the parent
                                    object
                                  maxProperties: 0
                                  type: object
                                jsonValue:
                                  description: Assigns the variable to a JSON value
                                    specified here
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                                requestHeader:
                                  description: |-
                                    Extract the value from the GraphQL HTTP request header. The extracted value is a string.
                                    If the header doesn't exist, an empty string will be used.
                                  type: string
                                resolverResult:
                                  description: |-
                                    Assigns the variable to the GraphQL resolver result.
                                    If this Extraction is used in a place where the resolver result is not available, an error
                                    will be thrown during configuration time.
                                  maxProperties: 0
                                  type: object
                              type: object
                            description: |-
                              Variables that can be used as a part of transformations for this field's resolution.
                              The key is the name of the variable, which is directly used in the transformation.
                              The value defines where the variable value is extracted from on the GraphQL request.
                            type: object
                        type: object
                      description: |-
                        Map of GraphQL fields for the type to resolutions.
                        The key must match the GraphQL field name and is case-sensitive.
                        Fields that don't have resolvers will use the GraphQL default resolver,
                        which returns the field in the parent object with the same name as the GraphQL field.
                      type: object
                  type: object
                description: |-
                  Map of GraphQL types to field resolutions.
                  The key must match the GraphQL type name and is case-sensitive.
                  Every field under GraphQL root types (Query, Mutation) must have a resolver defined.
                type: object
            type: object
          status:
            properties:
              global:
                properties:
                  message:
                    description: |-
                      Additional information about the current state of the resource across all
                      workspace clusters.
                    type: string
                  state:
                    description: |-
                      Whether the resource has been accepted as valid and processed in workspace
                      clusters that it exists in.
                    enum:
                    - PENDING
                    - ACCEPTED
                    - INVALID
                    - WARNING
                    - FAILED
                    - UNLICENSED
                    type: string
                type: object
              ownerWorkspace:
                description: Name of Workspace that owns the GraphQLResolverMap
                properties:
                  workspace:
                    type: string
                type: object
              workspaces:
                additionalProperties:
                  properties:
                    clusters:
                      additionalProperties:
                        properties:
                          generic:
                            properties:
                              message:
                                description: Additional information about the current
                                  state of the resource.
                                type: string
                              observedGeneration:
                                description: |-
                                  The most recent generation observed in the the object's metadata.
                                  If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh
                                  has not processed the most recent version of this object.
                                format: int64
                                type: integer
                              state:
                                description: |-
                                  Whether the resource has been accepted as valid and processed in the Gloo
                                  Mesh config translation.
                                enum:
                                - PENDING
                                - ACCEPTED
                                - INVALID
                                - WARNING
                                - FAILED
                                - UNLICENSED
                                type: string
                              updatedAt:
                                description: The last time the status was updated.
                                format: date-time
                                type: string
                            type: object
                        type: object
                      description: |-
                        The status of the resource in each cluster within the
                        workspace.
                      type: object
                  type: object
                description: The status of the resource in each workspace that it
                  exists in.
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
